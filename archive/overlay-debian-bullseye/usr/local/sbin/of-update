#!/usr/bin/env bash

## of-update v1.23 (6th May 2020)
##  Automated updates without reimaging.


usage() {
	echo "Usage: $0 [ force | systemd ]"
	echo
	echo "  force    :  Reinstalls the latest of-scripts regardless of whether they appear up to date."
	echo "  systemd  :  Indicates we are being triggered by systemd, in which case we stay alive."
	echo
	exit 1
}

if [ $# -gt 1 ] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	usage
fi

if [ "$USER" != "root" ] && [ "$USER" != "" ]; then
	echo "You need to run this with superuser privileges. Try 'sudo $0'."
	exit 1
fi


SERVER="openbeak.net"
SERVICE="/update/of-scripts.php"

THISSCRIPTPATH="$(cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P)"


updateCheck() {

	# Build our user agent and request.
	UPANDLOAD="$(awk -F. {'print $1'} /proc/uptime)"/"$(awk '{$NF=""; print $0}' /proc/loadavg | awk '{$1=$1};1' | sed -e 's/\//-/g' -e 's/ /\//g')"
	USER_AGENT="$(cat /tmp/openframe.uid)"/"$(cat /tmp/openframe.net)"/"$(cat /tmp/openframe.nfo)"/"$(cat /tmp/openframe.ver)"/"$UPANDLOAD"
	[[ "${1}" == "force" ]] && OFSCRIPTS_VER="000" || OFSCRIPTS_VER=$(cat /usr/local/sbin/of-scripts.ver)

	# During the first running session, try to set our timezone.
	[ -f /tmp/firstboot ] && timeout 10 $THISSCRIPTPATH/of-timezone update of-update &>/dev/null

	# Before we send anything, test the validity of the URL with a plain curl request.
	TEST_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://$SERVER$SERVICE)
	[[ "$TEST_RESPONSE" == "200" ]] && SERVICE_RESPONSE=$(curl -fsSA "$USER_AGENT" "https://$SERVER$SERVICE?ver=$OFSCRIPTS_VER" 2>&1) || SERVICE_RESPONSE="$TEST_RESPONSE"

	# If the test was passed and the update server sent a valid HTTPS URL in response, we go for it.
	if [[ "${SERVICE_RESPONSE:0:8}" == "https://" ]] && [[ "${1}" != "test" ]]; then

		# Work out the path to which files will be downloaded.
		TMP_PATH=$(echo "$SERVICE_RESPONSE" | awk -Fhttps:// '{print $2}')
		TMP_HOST=$(echo "$TMP_PATH" | awk -F/ '{print $1}')

		# Get new version number.
		OFSCRIPTS_VERNEW=$(curl -s $SERVICE_RESPONSE/of-scripts.ver)
		OFSCRIPTS_VERNEW=${OFSCRIPTS_VERNEW:0:3}

		# Check that those three digits make an integer.
		if [[ $OFSCRIPTS_VERNEW =~ ^-?[0-9]+$ ]]; then

			echo "Updating of-scripts v${OFSCRIPTS_VER:0:1}.${OFSCRIPTS_VER:1} to v${OFSCRIPTS_VERNEW:0:1}.${OFSCRIPTS_VERNEW:1} from $TMP_HOST..."

			# If we've received a secure URL in response, download any file prefixed by 'of-' into /tmp with full path from server.
			timeout 10 wget -o /dev/null -e robots=off --no-parent -r -A 'of-*' -P /tmp/ "$SERVICE_RESPONSE"

			# Work out the path to which files have been downloaded.
			TMP_PATH=$(echo "$SERVICE_RESPONSE" | awk -Fhttps:// '{print $2}')
			TMP_HOST=$(echo "$TMP_PATH" | awk -F/ '{print $1}')

			if [[ $(ls /tmp/"$TMP_PATH"/of-* | wc -l) -gt 0 ]]; then

				rm -rf /usr/local/sbin/of-*
				cp /tmp/"$TMP_PATH"of-* /usr/local/sbin
				chown root:root /usr/local/sbin/of-*
				chmod 755 /usr/local/sbin/of-*
				chmod 644 /usr/local/sbin/of-*.ver
				rm -rf /tmp/"$TMP_HOST"

				# If any of the scripts are configured as system services, restart those services.
				for s in $(ls -1 /usr/local/sbin/of-*); do
					OFSCRIPT=$(basename $s)
					[ -f /lib/systemd/system/$OFSCRIPT.service ] && systemctl restart $OFSCRIPT
				done

				echo "Update to of-scripts v${OFSCRIPTS_VERNEW:0:1}.${OFSCRIPTS_VERNEW:1} complete."
				return 0

			else

				echo "Cannot find files expected in /tmp/$TMP_PATH"
				echo "Update aborted."

			fi

		else

			echo "Weird version (v${OFSCRIPTS_VERNEW:0:1}.${OFSCRIPTS_VERNEW:1}) reported."
			echo "Update aborted."

		fi

	elif [[ "$SERVICE_RESPONSE" =~ "000" ]]; then

		echo "System not ready, clock has probably not yet synchronised."
		return 1

	elif [[ "$SERVICE_RESPONSE" =~ "404" ]] || echo "$SERVICE_RESPONSE" | grep -iqF 'not found' ; then

		echo "Could not find $SERVICE on $SERVER ($SERVICE_RESPONSE)."
		echo "Update aborted."

	elif [[ "$SERVICE_RESPONSE" == "500" ]]; then

		echo "Server error by $SERVER ($SERVICE_RESPONSE)."
		echo "Update aborted."

	elif [[ "$SERVICE_RESPONSE" =~ "http://" ]]; then

		echo "Received: $SERVICE_RESPONSE"
		echo
		echo "Response contained an insecure HTTP address."
		echo "Update aborted."

	elif [[ "$SERVICE_RESPONSE" == "NV" ]]; then

		echo "No version number was received by the server."
		echo "Update aborted."

	else

		if [[ "$SERVICE_RESPONSE" == "OK" ]]; then

			echo "Installed of-scripts v${OFSCRIPTS_VER:0:1}.${OFSCRIPTS_VER:1} are the latest available."
			return 0

		else

			echo "Received: $SERVICE_RESPONSE"
			echo
			echo "Not a clue what happened here. This needs investigation!"
			echo "Update aborted."
			return 3

		fi

	fi

	return 2

}


# We can't do anything useful until the system is properly up. This relies upon of-identifier and of-netplan.
while [ ! -f /tmp/openframe.uid ] || [ ! -f /tmp/openframe.net ] || [ ! -f /tmp/openframe.nfo ] || [ ! -f /tmp/openframe.ver ]; do
	sleep 1
done

sync

# Once we have our details, enter the main loop.
while true; do

	PINGTRIES=1
	while ! ping -c 1 1.1.1.1 2>&1 >/dev/null; do

		# Only wait in loop if we're running as a system service.
		if [[ "${1}" == "systemd" ]]; then
			echo "Internet connectivity down. Retrying in $PINGTRIES seconds..."
			sleep $PINGTRIES
			[[ $PINGTRIES -lt 3600 ]] && ((PINGTRIES++))
		else
			echo "Internet connectivity down."
			exit 0
		fi

	done

	# If we're here, we managed to get a ping response.
	updateCheck ${1}
	EXITSTATUS="$?"

	if [[ "${1}" == "systemd" ]]; then

		if [[ "$EXITSTATUS" -eq 0 ]]; then
			echo "Sleeping for 24 hours."
			sleep 86400

		elif [[ "$EXITSTATUS" -eq 1 ]]; then
			echo "Retrying in 10 seconds."
			sleep 10

		elif [[ "$EXITSTATUS" -eq 2 ]]; then
			echo "Retrying in 1 hour."
			sleep 3600

		elif [[ "$EXITSTATUS" -eq 3 ]]; then
			echo "Retrying in 6 hours."
			sleep 21600
		fi

	else

		exit 0

	fi

done

exit 0
